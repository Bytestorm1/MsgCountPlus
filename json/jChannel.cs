// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MsgCountPlusNET.json;
//
//    var jChannel = JChannel.FromJson(jsonString);

namespace MsgCountPlusNET.json
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Linq;
    using Discord.WebSocket;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class jChannel
    {
        public jChannel() {
            Users = new List<jUser>();
        }
        public jChannel(ISocketMessageChannel channel) {
            Id = channel.Id;
            Name = channel.Name;
            Users = new List<jUser>();
        }
        [JsonProperty("ID", Required = Required.Always)]
        public ulong Id { get; set; }

        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("users", Required = Required.Always)]
        public List<jUser> Users { get; set; }

        public jUser Lookup(ulong userID) {
            List<jUser> users = Users.Where(item => item.Id == userID).ToList();
            if (users.Count == 0)
            {
                return null;
            }
            else {
                return users.First();
            }
        }
        public List<DateTimeOffset> fullTimestamps() {
            List<DateTimeOffset> output = new List<DateTimeOffset>();
            foreach (jUser user in Users)
            {
                output.AddRange(user.Timestamps);
            }
            return output;
        }
        public int messageCount()
        {
            return fullTimestamps().Count;
        }
    }

    public partial class jChannel
    {
        public static jChannel FromJson(string json) => JsonConvert.DeserializeObject<jChannel>(json, MsgCountPlusNET.json.jChannel_Converter.Settings);
    }

    public static class jChannel_Serialize
    {
        public static string ToJson(this jChannel self) => JsonConvert.SerializeObject(self, MsgCountPlusNET.json.jChannel_Converter.Settings);
    }

    internal static class jChannel_Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
