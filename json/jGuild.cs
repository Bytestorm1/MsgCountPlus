// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using MsgCountPlusNET.json;
//
//    var jGuild = JGuild.FromJson(jsonString);

namespace MsgCountPlusNET.json
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using System.Linq;
    using System.Threading;
    using Discord.WebSocket;
    using MsgCountPlusNET.Commands;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class jGuild
    {
        public jGuild()
        {

        }
        public jGuild(SocketGuild guild, bool index)
        {
            Id = guild.Id;
            Name = guild.Name;
            Channels = new List<jChannel>();
            if (index)
            {
                List<Thread> threads = new List<Thread>();
                foreach (ISocketMessageChannel channel in guild.TextChannels)
                {
                    //await Program.Log(channel.Name + " Start");
                    try
                    {
                        var TTh = new Thread(async delegate ()
                        {
                            jChannel c = new jChannel()
                            {
                                Id = channel.Id,
                                Name = channel.Name,
                                Users = new List<jUser>()
                            };
                            MessageCollector.indexChannel(channel, c);
                            Channels.Add(c);
                        });
                        threads.Add(TTh);
                        TTh.Start();
                    }
                    catch (Exception ex)
                    {
                        continue;
                    }
                    //await Program.Log(channel.Name + " End");
                }
                while (threads.Exists(item => item.IsAlive))
                {
                    Thread.Sleep(5);
                }
            }
            else {
                foreach (SocketTextChannel channel in guild.TextChannels)
                {
                    jChannel c = new jChannel()
                    {
                        Id = channel.Id,
                        Name = channel.Name,
                        Users = new List<jUser>()
                    };
                    Channels.Add(c);
                }
            }
        }
        [JsonProperty("ID", Required = Required.Always)]
        public ulong Id { get; set; }

        [JsonProperty("name", Required = Required.Always)]
        public string Name { get; set; }

        [JsonProperty("channels", Required = Required.Always)]
        public List<jChannel> Channels { get; set; }

        [JsonProperty("settings", Required =Required.Default)]
        public jSettings settings = new jSettings();

        public jUser LookUp(ulong userID, ulong ChannelID) {
            List<jChannel> jChannels = Channels.Where(item => item.Id == ChannelID).ToList();
            if (jChannels.Count == 0)
            {
                return null;
            }
            else
            {
                List<jUser> jUsers = jChannels.First().Users.Where(item => item.Id == userID).ToList();
                if (jUsers.Count == 0)
                {
                    return null;
                }
                else
                {
                    return jUsers.First();
                }
            }
        }
        public jUser LookUp(ulong userID) {
            List<jChannel> channels = this.Channels.Where(item => item.Users.Exists(u => u.Id == userID)).ToList();
            jUser U = null;
            for (int i = 0; i < channels.Count; i++) {
                if (U == null)
                {
                    U = channels[i].Lookup(userID);
                }
                else {
                    jUser temp = channels[i].Lookup(userID);
                    U.Timestamps.AddRange(temp.Timestamps);
                }
            }
            return U;
        }        
        public List<jUser> Members() {
            List<jUser> output = new List<jUser>();
            foreach (jChannel channel in Channels)
            {
                foreach (jUser user in channel.Users) {
                    if (output.Where(item => item.Id == user.Id).Count() > 0)
                    {
                        output.Where(item => item.Id == user.Id).First().Timestamps.AddRange(channel.Lookup(user.Id).Timestamps);
                    }
                    else {
                        output.Add(user);
                    }
                }
                //output.AddRange(channel.Users);
            }
            return output;
        }
        public List<DateTimeOffset> FullTimestamps()
        {
            List<DateTimeOffset> output = new List<DateTimeOffset>();
            foreach (jChannel channel in Channels)
            {
                output.AddRange(channel.fullTimestamps());
            }
            return output;
        }
        public int MessageCount()
        {
            return FullTimestamps().Count;
        }
    }

    public partial class jGuild
    {
        public static jGuild FromJson(string json) => JsonConvert.DeserializeObject<jGuild>(json, MsgCountPlusNET.json.jGuild_Converter.Settings);
    }

    public static class jGuild_Serialize
    {
        public static string ToJson(this jGuild self) => JsonConvert.SerializeObject(self, MsgCountPlusNET.json.jGuild_Converter.Settings);
    }

    internal static class jGuild_Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
